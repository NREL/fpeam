from Module import Module

from FPEAM import (Data, utils)

LOGGER = utils.logger(name=__name__)


class FugitiveDust(Module):
    """Base class to manage execution of on-farm fugitive dust calculations"""

    def __init__(self, config, production, fugitive_dust_emission_factors,
                 crop_measure_type,
                 **kvals):
        """
        :param config [ConfigObj] configuration options
        :param production: [DataFrame] production values
        :param fugitive_dust_emission_factors: [DataFrame] fugitive dust
        generation per acre
        """

        # init parent
        super(FugitiveDust, self).__init__(config = config)

        # init properties
        self.production = production
        self.crop_measure_type = crop_measure_type

        # pre-process fugitive dust input file to calculate
        # fugitive dust generation per acre for one average year

        # sum the harvest and non-harvest fugitive dust emission factors
        # (sum over source_category)
        _fugitive_dust_sum = fugitive_dust_emission_factors.groupby([
            'feedstock', 'tillage_type', 'rotation_year',
            'pollutant']).sum()

        # convert the indexes generated by .groupby back into columns to
        # allow a different .groupby to be created from this df
        _fugitive_dust_sum.reset_index(level = ['feedstock', 'tillage_type',
                                                'rotation_year', 'pollutant'],
                                         inplace = True)

        # average fugitive dust emission factors over rotation_year within
        # each feedstock-tillage-pollutant combo
        # these average numbers get multiplied by acreages to calculate
        # fugitive dust by feedstock, tillage and region
        self.fugitive_dust = _fugitive_dust_sum.groupby(['feedstock',
                                                         'tillage_type',
                                                         'pollutant']).mean()

    def get_fugitivedust(self):
        """
        Calculate all total PM10 and PM2.5 emissions from fugitive dust by
        feedstock, region and tillage type.

        :return: _df: DataFrame containing PM10 and PM2.5 amounts by
        feedstock, tillage type and region
        """

        # define columns used to merge production with fugitive_dust
        _idx = ['feedstock', 'tillage_type']

        # define list of columns of interest in production
        _prod_columns = ['row_id'] + _idx + ['region', 'crop_amount']

        # select only production rows corresponding to the user-defined crop
        #  measure
        _prod_rows = self.production == self.crop_measure_type

        # merge production with fugitive dust
        _df = self.production[_prod_rows][_prod_columns].merge(
            self.fugitive_dust, on = _idx, suffixes = ['_prod',
                                                       '_fugitivedust'])

        # calculate fugitive dust
        _df.eval('pollutant_amount = overall_factor * crop_amount * rate',
                 inplace = True)

        # clean up DataFrame
        _df = _df[['row_id_prod', 'feedstock', 'tillage_type', 'region',
                   'pollutant', 'pollutant_amount']].set_index('row_id_prod',
                                                  drop = True)

        return _df